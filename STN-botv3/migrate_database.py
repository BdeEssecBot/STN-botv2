#!/usr/bin/env python3
"""
Script de migration de base de donn√©es STN-bot v2 ‚Üí v3
Usage: python migrate_database.py
"""

import sqlite3
import os
from pathlib import Path
import uuid
from datetime import datetime

def migrate_database():
    """Migre la base de donn√©es vers la v3"""
    
    db_path = Path("data/stn_bot.db")
    
    print("üîÑ Migration de la base de donn√©es v2 ‚Üí v3")
    print("=" * 50)
    
    if not db_path.exists():
        print("‚ùå Base de donn√©es non trouv√©e. Cr√©ation d'une nouvelle base...")
        create_fresh_database(db_path)
        return
    
    # Cr√©er une sauvegarde
    backup_path = db_path.with_suffix('.backup.db')
    import shutil
    shutil.copy2(db_path, backup_path)
    print(f"üíæ Sauvegarde cr√©√©e: {backup_path}")
    
    try:
        with sqlite3.connect(db_path) as conn:
            print("üîç Analyse de la structure actuelle...")
            
            # V√©rifier les colonnes existantes
            cursor = conn.execute("PRAGMA table_info(forms)")
            existing_columns = [row[1] for row in cursor.fetchall()]
            print(f"üìã Colonnes forms existantes: {existing_columns}")
            
            # === √âTAPE 1: Cr√©er les nouvelles tables ===
            print("\nüìÅ Cr√©ation des nouvelles tables...")
            
            # Table poles
            conn.execute("""
                CREATE TABLE IF NOT EXISTS poles (
                    id TEXT PRIMARY KEY,
                    name TEXT NOT NULL UNIQUE,
                    description TEXT,
                    color TEXT DEFAULT '#FF6B6B',
                    is_active BOOLEAN DEFAULT 1,
                    created_at TEXT
                )
            """)
            print("‚úÖ Table poles cr√©√©e")
            
            # Table groups
            conn.execute("""
                CREATE TABLE IF NOT EXISTS groups (
                    id TEXT PRIMARY KEY,
                    name TEXT NOT NULL,
                    description TEXT,
                    member_ids TEXT,
                    color TEXT DEFAULT '#4CAF50',
                    icon TEXT DEFAULT 'üë•',
                    is_active BOOLEAN DEFAULT 1,
                    created_at TEXT
                )
            """)
            print("‚úÖ Table groups cr√©√©e")
            
            # === √âTAPE 2: Ajouter pole_id √† forms ===
            if 'pole_id' not in existing_columns:
                print("\nüîß Ajout de la colonne pole_id √† forms...")
                conn.execute("ALTER TABLE forms ADD COLUMN pole_id TEXT")
                print("‚úÖ Colonne pole_id ajout√©e")
            else:
                print("‚úÖ Colonne pole_id d√©j√† pr√©sente")
            
            # === √âTAPE 3: Cr√©er un p√¥le par d√©faut ===
            print("\nüè¢ Gestion du p√¥le par d√©faut...")
            
            cursor = conn.execute("SELECT COUNT(*) FROM poles")
            pole_count = cursor.fetchone()[0]
            
            if pole_count == 0:
                # Cr√©er le p√¥le par d√©faut
                default_pole_id = str(uuid.uuid4())
                conn.execute("""
                    INSERT INTO poles (id, name, description, color, is_active, created_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (
                    default_pole_id, "G√©n√©ral", "P√¥le par d√©faut cr√©√© lors de la migration",
                    "#2196F3", True, datetime.now().isoformat()
                ))
                print("‚úÖ P√¥le par d√©faut 'G√©n√©ral' cr√©√©")
                
                # Assigner tous les formulaires existants au p√¥le par d√©faut
                cursor = conn.execute("""
                    UPDATE forms SET pole_id = ? WHERE pole_id IS NULL OR pole_id = ''
                """)
                updated_forms = cursor.rowcount
                print(f"‚úÖ {updated_forms} formulaires assign√©s au p√¥le par d√©faut")
            else:
                print("‚úÖ P√¥les d√©j√† pr√©sents")
            
            # === √âTAPE 4: V√©rifications finales ===
            print("\nüîç V√©rifications finales...")
            
            # Compter les donn√©es
            people_count = conn.execute("SELECT COUNT(*) FROM people").fetchone()[0]
            forms_count = conn.execute("SELECT COUNT(*) FROM forms").fetchone()[0]
            poles_count = conn.execute("SELECT COUNT(*) FROM poles").fetchone()[0]
            groups_count = conn.execute("SELECT COUNT(*) FROM groups").fetchone()[0]
            responses_count = conn.execute("SELECT COUNT(*) FROM responses").fetchone()[0]
            
            print(f"üìä Statistiques apr√®s migration:")
            print(f"   üë• Personnes: {people_count}")
            print(f"   üè¢ P√¥les: {poles_count}")
            print(f"   üë• Groupes: {groups_count}")
            print(f"   üìã Formulaires: {forms_count}")
            print(f"   üìù R√©ponses: {responses_count}")
            
            # V√©rifier les formulaires sans p√¥le
            orphaned_forms = conn.execute("""
                SELECT COUNT(*) FROM forms WHERE pole_id IS NULL OR pole_id = ''
            """).fetchone()[0]
            
            if orphaned_forms > 0:
                print(f"‚ö†Ô∏è  {orphaned_forms} formulaires sans p√¥le d√©tect√©s")
                # Les assigner au p√¥le par d√©faut
                default_pole = conn.execute("SELECT id FROM poles LIMIT 1").fetchone()
                if default_pole:
                    conn.execute("""
                        UPDATE forms SET pole_id = ? WHERE pole_id IS NULL OR pole_id = ''
                    """, (default_pole[0],))
                    print(f"‚úÖ Formulaires orphelins assign√©s au p√¥le par d√©faut")
            
            conn.commit()
            
            print("\nüéâ MIGRATION R√âUSSIE!")
            print("=" * 50)
            print("‚úÖ Votre base de donn√©es est maintenant compatible v3")
            print("‚úÖ Toutes vos donn√©es ont √©t√© pr√©serv√©es")
            print("‚úÖ Un p√¥le par d√©faut a √©t√© cr√©√©")
            print(f"üíæ Sauvegarde disponible: {backup_path}")
            
    except Exception as e:
        print(f"\nüí• ERREUR DURANTE LA MIGRATION: {e}")
        print(f"üîÑ Restauration de la sauvegarde...")
        
        # Restaurer la sauvegarde
        shutil.copy2(backup_path, db_path)
        print("‚úÖ Sauvegarde restaur√©e")
        raise

def create_fresh_database(db_path):
    """Cr√©e une nouvelle base de donn√©es v3"""
    print("üÜï Cr√©ation d'une nouvelle base de donn√©es v3...")
    
    db_path.parent.mkdir(exist_ok=True)
    
    with sqlite3.connect(db_path) as conn:
        conn.executescript("""
            CREATE TABLE poles (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL UNIQUE,
                description TEXT,
                color TEXT DEFAULT '#FF6B6B',
                is_active BOOLEAN DEFAULT 1,
                created_at TEXT
            );
            
            CREATE TABLE groups (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                description TEXT,
                member_ids TEXT,
                color TEXT DEFAULT '#4CAF50',
                icon TEXT DEFAULT 'üë•',
                is_active BOOLEAN DEFAULT 1,
                created_at TEXT
            );
            
            CREATE TABLE people (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                email TEXT,
                psid TEXT,
                created_at TEXT
            );
            
            CREATE TABLE forms (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                google_id TEXT UNIQUE,
                pole_id TEXT,
                people_ids TEXT,
                created_at TEXT,
                FOREIGN KEY (pole_id) REFERENCES poles (id)
            );
            
            CREATE TABLE responses (
                id TEXT PRIMARY KEY,
                form_id TEXT,
                person_id TEXT,
                has_responded BOOLEAN DEFAULT 0,
                last_reminder TEXT,
                FOREIGN KEY (form_id) REFERENCES forms (id),
                FOREIGN KEY (person_id) REFERENCES people (id)
            );
        """)
        
        # Cr√©er le p√¥le par d√©faut
        default_pole_id = str(uuid.uuid4())
        conn.execute("""
            INSERT INTO poles (id, name, description, color, is_active, created_at)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (
            default_pole_id, "G√©n√©ral", "P√¥le par d√©faut",
            "#2196F3", True, datetime.now().isoformat()
        ))
        
        conn.commit()
    
    print("‚úÖ Nouvelle base de donn√©es v3 cr√©√©e avec p√¥le par d√©faut")

def test_database():
    """Teste la base apr√®s migration"""
    print("\nüß™ Test de la base de donn√©es...")
    
    try:
        from database import Database
        db = Database()
        
        # Test basique
        poles = db.get_poles()
        people = db.get_people()
        forms = db.get_forms()
        
        print(f"‚úÖ Test r√©ussi: {len(poles)} p√¥les, {len(people)} personnes, {len(forms)} formulaires")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test √©chou√©: {e}")
        return False

if __name__ == "__main__":
    try:
        migrate_database()
        
        if test_database():
            print("\nüöÄ Vous pouvez maintenant lancer l'application:")
            print("   streamlit run app.py")
        else:
            print("\n‚ö†Ô∏è  Des probl√®mes ont √©t√© d√©tect√©s. V√©rifiez les logs.")
            
    except Exception as e:
        print(f"\nüí• Migration √©chou√©e: {e}")
        print("üîÑ V√©rifiez que la base de donn√©es n'est pas utilis√©e par une autre application")
        