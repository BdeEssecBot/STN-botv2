# database/manager.py
"""Gestionnaire de base de donn√©es Streamlit native pour STN-bot v2"""

import streamlit as st
import pandas as pd
import logging
from typing import List, Dict, Optional, Any, Tuple
from datetime import datetime, timedelta
import json

from database.models import Person, Form, Response, ReminderStats, DatabaseQuery

logger = logging.getLogger(__name__)

class StreamlitDatabase:
    """
    Gestionnaire de base de donn√©es utilisant le cache Streamlit
    R√âVOLUTION: Plus besoin de Notion ! Tout en m√©moire optimis√©.
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self._initialize_database()
    
    def _initialize_database(self):
        """Initialise la base de donn√©es dans session_state"""
        if 'db_initialized' not in st.session_state:
            st.session_state.db_initialized = True
            st.session_state.people = []
            st.session_state.forms = []
            st.session_state.responses = []
            st.session_state.last_sync = None
            st.session_state.database_version = "2.0"
            
            logger.info("üöÄ Base de donn√©es Streamlit initialis√©e")
    
    # ============ PEOPLE MANAGEMENT ============
    
    def add_person(self, person: Person) -> bool:
        """Ajoute une personne √† la base"""
        try:
            # V√©rifier les doublons par email
            if person.email and self.get_person_by_email(person.email):
                logger.warning(f"Personne avec email {person.email} existe d√©j√†")
                return False
            
            # V√©rifier les doublons par PSID
            if person.psid and self.get_person_by_psid(person.psid):
                logger.warning(f"Personne avec PSID {person.psid} existe d√©j√†")
                return False
            
            person.updated_at = datetime.now()
            st.session_state.people.append(person.to_dict())
            logger.info(f"‚úÖ Personne ajout√©e: {person.name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur ajout personne: {e}")
            return False
    
    def get_all_people(self) -> List[Person]:
        """R√©cup√®re toutes les personnes"""
        try:
            return [Person.from_dict(p) for p in st.session_state.people]
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration personnes: {e}")
            return []
    
    def get_person_by_id(self, person_id: str) -> Optional[Person]:
        """R√©cup√®re une personne par ID"""
        for person_dict in st.session_state.people:
            if person_dict["id"] == person_id:
                return Person.from_dict(person_dict)
        return None
    
    def get_person_by_email(self, email: str) -> Optional[Person]:
        """R√©cup√®re une personne par email (normalis√©)"""
        normalized_email = email.lower().strip()
        for person_dict in st.session_state.people:
            person = Person.from_dict(person_dict)
            if person.normalize_email() == normalized_email:
                return person
        return None
    
    def get_person_by_psid(self, psid: str) -> Optional[Person]:
        """R√©cup√®re une personne par PSID"""
        for person_dict in st.session_state.people:
            if person_dict["psid"] == psid:
                return Person.from_dict(person_dict)
        return None
    
    def update_person(self, person: Person) -> bool:
        """Met √† jour une personne"""
        try:
            for i, person_dict in enumerate(st.session_state.people):
                if person_dict["id"] == person.id:
                    person.updated_at = datetime.now()
                    st.session_state.people[i] = person.to_dict()
                    logger.info(f"‚úÖ Personne mise √† jour: {person.name}")
                    return True
            
            logger.warning(f"‚ö†Ô∏è Personne {person.id} non trouv√©e pour mise √† jour")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour personne: {e}")
            return False
    
    def delete_person(self, person_id: str) -> bool:
        """Supprime une personne et ses r√©ponses associ√©es"""
        try:
            # Supprimer les r√©ponses associ√©es
            st.session_state.responses = [
                r for r in st.session_state.responses 
                if r["person_id"] != person_id
            ]
            
            # Supprimer la personne
            initial_count = len(st.session_state.people)
            st.session_state.people = [
                p for p in st.session_state.people 
                if p["id"] != person_id
            ]
            
            deleted = len(st.session_state.people) < initial_count
            if deleted:
                logger.info(f"‚úÖ Personne {person_id} supprim√©e avec ses r√©ponses")
            
            return deleted
            
        except Exception as e:
            logger.error(f"‚ùå Erreur suppression personne: {e}")
            return False
    
    # ============ FORMS MANAGEMENT ============
    
    def add_form(self, form: Form) -> bool:
        """Ajoute un formulaire √† la base"""
        try:
            # V√©rifier les doublons par Google Form ID
            if self.get_form_by_google_id(form.google_form_id):
                logger.warning(f"Formulaire avec Google ID {form.google_form_id} existe d√©j√†")
                return False
            
            form.updated_at = datetime.now()
            st.session_state.forms.append(form.to_dict())
            logger.info(f"‚úÖ Formulaire ajout√©: {form.name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur ajout formulaire: {e}")
            return False
    
    def get_all_forms(self) -> List[Form]:
        """R√©cup√®re tous les formulaires"""
        try:
            return [Form.from_dict(f) for f in st.session_state.forms]
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration formulaires: {e}")
            return []
    
    def get_active_forms(self) -> List[Form]:
        """R√©cup√®re les formulaires actifs seulement"""
        return [f for f in self.get_all_forms() if f.is_active]
    
    def get_form_by_id(self, form_id: str) -> Optional[Form]:
        """R√©cup√®re un formulaire par ID"""
        for form_dict in st.session_state.forms:
            if form_dict["id"] == form_id:
                return Form.from_dict(form_dict)
        return None
    
    def get_form_by_google_id(self, google_form_id: str) -> Optional[Form]:
        """R√©cup√®re un formulaire par Google Form ID"""
        for form_dict in st.session_state.forms:
            if form_dict["google_form_id"] == google_form_id:
                return Form.from_dict(form_dict)
        return None
    
    def update_form(self, form: Form) -> bool:
        """Met √† jour un formulaire"""
        try:
            for i, form_dict in enumerate(st.session_state.forms):
                if form_dict["id"] == form.id:
                    form.updated_at = datetime.now()
                    st.session_state.forms[i] = form.to_dict()
                    logger.info(f"‚úÖ Formulaire mis √† jour: {form.name}")
                    return True
            
            logger.warning(f"‚ö†Ô∏è Formulaire {form.id} non trouv√© pour mise √† jour")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour formulaire: {e}")
            return False
    
    def delete_form(self, form_id: str) -> bool:
        """Supprime un formulaire et ses r√©ponses associ√©es"""
        try:
            # Supprimer les r√©ponses associ√©es
            st.session_state.responses = [
                r for r in st.session_state.responses 
                if r["form_id"] != form_id
            ]
            
            # Supprimer le formulaire
            initial_count = len(st.session_state.forms)
            st.session_state.forms = [
                f for f in st.session_state.forms 
                if f["id"] != form_id
            ]
            
            deleted = len(st.session_state.forms) < initial_count
            if deleted:
                logger.info(f"‚úÖ Formulaire {form_id} supprim√© avec ses r√©ponses")
            
            return deleted
            
        except Exception as e:
            logger.error(f"‚ùå Erreur suppression formulaire: {e}")
            return False
    
    # ============ RESPONSES MANAGEMENT ============
    
    def add_or_update_response(self, response: Response) -> bool:
        """Ajoute ou met √† jour une r√©ponse"""
        try:
            # Chercher si la r√©ponse existe d√©j√† (m√™me form + person)
            existing_response = self.get_response_by_form_and_person(
                response.form_id, response.person_id
            )
            
            if existing_response:
                # Mettre √† jour la r√©ponse existante
                response.id = existing_response.id  # Garder le m√™me ID
                response.created_at = existing_response.created_at  # Garder la date de cr√©ation
                return self.update_response(response)
            else:
                # Cr√©er nouvelle r√©ponse
                response.updated_at = datetime.now()
                st.session_state.responses.append(response.to_dict())
                logger.info(f"‚úÖ R√©ponse ajout√©e: Form {response.form_id[:8]}... - Person {response.person_id[:8]}...")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur ajout/mise √† jour r√©ponse: {e}")
            return False
    
    def get_all_responses(self) -> List[Response]:
        """R√©cup√®re toutes les r√©ponses"""
        try:
            return [Response.from_dict(r) for r in st.session_state.responses]
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration r√©ponses: {e}")
            return []
    
    def get_responses_for_form(self, form_id: str) -> List[Response]:
        """R√©cup√®re toutes les r√©ponses pour un formulaire - RETOURNE List[Response]"""
        all_responses = self.get_all_responses()
        return DatabaseQuery.filter_responses_by_form(all_responses, form_id)
    
    def get_responses_with_people_for_form(self, form_id: str) -> List[Tuple[Person, Response]]:
        """R√©cup√®re les r√©ponses avec les personnes pour un formulaire - RETOURNE List[Tuple[Person, Response]]"""
        responses = self.get_responses_for_form(form_id)
        result = []
        for response in responses:
            person = self.get_person_by_id(response.person_id)
            if person:
                result.append((person, response))
        return result
    
    def get_responses_for_person(self, person_id: str) -> List[Response]:
        """R√©cup√®re toutes les r√©ponses d'une personne"""
        return [r for r in self.get_all_responses() if r.person_id == person_id]
    
    def get_response_by_form_and_person(self, form_id: str, person_id: str) -> Optional[Response]:
        """R√©cup√®re une r√©ponse sp√©cifique (form + person)"""
        for response_dict in st.session_state.responses:
            if (response_dict["form_id"] == form_id and 
                response_dict["person_id"] == person_id):
                return Response.from_dict(response_dict)
        return None
    
    def update_response(self, response: Response) -> bool:
        """Met √† jour une r√©ponse"""
        try:
            for i, response_dict in enumerate(st.session_state.responses):
                if response_dict["id"] == response.id:
                    response.updated_at = datetime.now()
                    st.session_state.responses[i] = response.to_dict()
                    logger.info(f"‚úÖ R√©ponse mise √† jour: {response.id[:8]}...")
                    return True
            
            logger.warning(f"‚ö†Ô∏è R√©ponse {response.id} non trouv√©e pour mise √† jour")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour r√©ponse: {e}")
            return False
    
    def mark_as_responded(self, form_id: str, person_id: str, 
                         response_date: Optional[datetime] = None) -> bool:
        """Marque une personne comme ayant r√©pondu √† un formulaire"""
        try:
            response = self.get_response_by_form_and_person(form_id, person_id)
            if response:
                response.mark_as_responded(response_date)
                return self.update_response(response)
            else:
                # Cr√©er nouvelle r√©ponse marqu√©e comme r√©pondue
                new_response = Response(
                    form_id=form_id,
                    person_id=person_id,
                    has_responded=True,
                    response_date=response_date or datetime.now()
                )
                return self.add_or_update_response(new_response)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur marquage r√©ponse: {e}")
            return False
    
    def record_reminder_sent(self, form_id: str, person_id: str) -> bool:
        """Enregistre qu'un rappel a √©t√© envoy√©"""
        try:
            response = self.get_response_by_form_and_person(form_id, person_id)
            if response:
                response.record_reminder_sent()
                return self.update_response(response)
            else:
                # Cr√©er nouvelle r√©ponse avec rappel
                new_response = Response(
                    form_id=form_id,
                    person_id=person_id,
                    last_reminder=datetime.now(),
                    reminder_count=1
                )
                return self.add_or_update_response(new_response)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur enregistrement rappel: {e}")
            return False
    
    # ============ QUERIES COMPLEXES ============
    
    def get_non_responders_for_form(self, form_id: str) -> List[Tuple[Person, Response]]:
        """
        M√âTHODE CENTRALE: R√©cup√®re les non-r√©pondants pour un formulaire avec leurs infos
        RETOURNE: List[Tuple[Person, Response]] pour compatibilit√© avec reminder_service
        """
        responses = self.get_responses_for_form(form_id)  # List[Response]
        non_responders = DatabaseQuery.get_non_responders(responses)  # List[Response] aussi
        
        result = []
        for response in non_responders:
            person = self.get_person_by_id(response.person_id)
            if person:
                result.append((person, response))
        
        return result
    
    def get_all_non_responders(self) -> Dict[str, List[Tuple[Person, Response]]]:
        """R√©cup√®re tous les non-r√©pondants group√©s par formulaire"""
        result = {}
        
        for form in self.get_active_forms():
            non_responders = self.get_non_responders_for_form(form.id)
            result[form.name] = non_responders
        
        return result
    
    def get_people_needing_reminders(self, form_id: str, cooldown_hours: int = 24) -> List[Tuple[Person, Response]]:
        """R√©cup√®re les personnes qui peuvent recevoir un rappel pour un formulaire"""
        responses = self.get_responses_for_form(form_id)  # List[Response]
        ready_for_reminder = DatabaseQuery.get_people_needing_reminders(responses, cooldown_hours)
        
        result = []
        for response in ready_for_reminder:
            person = self.get_person_by_id(response.person_id)
            if person:
                result.append((person, response))
        
        return result
    
    def get_statistics(self) -> ReminderStats:
        """Calcule les statistiques globales"""
        people = self.get_all_people()
        responses = self.get_all_responses()
        stats = DatabaseQuery.calculate_stats(responses, people)
        stats.last_sync = st.session_state.get('last_sync')
        return stats
    
    # ============ SYNCHRONISATION GOOGLE FORMS ============
    
    def sync_google_forms_responses(self, google_responses: Dict[str, List[Dict]]) -> Dict[str, int]:
        """
        Synchronise les r√©ponses Google Forms avec la base locale
        
        Args:
            google_responses: Dict[google_form_id -> List[responses]]
        
        Returns:
            Dict avec les statistiques de sync
        """
        sync_stats = {"updated": 0, "created": 0, "errors": 0}
        
        try:
            for google_form_id, responses_data in google_responses.items():
                # Trouver le formulaire local
                form = self.get_form_by_google_id(google_form_id)
                if not form:
                    logger.warning(f"‚ö†Ô∏è Formulaire Google {google_form_id} non trouv√© dans la base locale")
                    continue
                
                # Traiter chaque r√©ponse Google
                for response_data in responses_data:
                    email = response_data.get('email', '').lower().strip()
                    if not email:
                        continue
                    
                    # Trouver la personne correspondante
                    person = self.get_person_by_email(email)
                    if not person:
                        # Cr√©er automatiquement la personne si elle n'existe pas
                        full_name = f"{response_data.get('firstName', '')} {response_data.get('lastName', '')}".strip()
                        if not full_name:
                            full_name = email.split('@')[0]  # Fallback sur username
                        
                        person = Person(
                            name=full_name,
                            email=email
                        )
                        if self.add_person(person):
                            sync_stats["created"] += 1
                        else:
                            sync_stats["errors"] += 1
                            continue
                    
                    # Marquer comme ayant r√©pondu
                    response_date = None
                    if response_data.get('timestamp'):
                        try:
                            # Essayer de parser la date si fournie
                            response_date = datetime.fromisoformat(response_data['timestamp'])
                        except:
                            response_date = datetime.now()
                    
                    if self.mark_as_responded(form.id, person.id, response_date):
                        sync_stats["updated"] += 1
                    else:
                        sync_stats["errors"] += 1
            
            # Mettre √† jour la date de derni√®re sync
            st.session_state.last_sync = datetime.now()
            
            logger.info(f"‚úÖ Sync termin√©e: {sync_stats['updated']} mises √† jour, "
                       f"{sync_stats['created']} cr√©ations, {sync_stats['errors']} erreurs")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la synchronisation: {e}")
            sync_stats["errors"] += 1
        
        return sync_stats
    
    # ============ IMPORT/EXPORT & UTILITIES ============
    
    def export_to_dict(self) -> Dict[str, Any]:
        """Exporte toute la base de donn√©es vers un dictionnaire"""
        last_sync = st.session_state.get('last_sync')
        return {
            "people": st.session_state.people,
            "forms": st.session_state.forms,
            "responses": st.session_state.responses,
            "last_sync": last_sync.isoformat() if last_sync else None,
            "database_version": st.session_state.get('database_version', '2.0'),
            "export_date": datetime.now().isoformat()
        }
    
    def import_from_dict(self, data: Dict[str, Any]) -> bool:
        """Importe des donn√©es depuis un dictionnaire"""
        try:
            st.session_state.people = data.get("people", [])
            st.session_state.forms = data.get("forms", [])
            st.session_state.responses = data.get("responses", [])
            
            if data.get("last_sync"):
                st.session_state.last_sync = datetime.fromisoformat(data["last_sync"])
            
            logger.info(f"‚úÖ Import r√©ussi: {len(st.session_state.people)} personnes, "
                       f"{len(st.session_state.forms)} formulaires, "
                       f"{len(st.session_state.responses)} r√©ponses")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'import: {e}")
            return False
    
    def get_dataframes(self) -> Dict[str, pd.DataFrame]:
        """Retourne les donn√©es sous forme de DataFrames pour l'affichage"""
        try:
            return {
                "people": pd.DataFrame([p for p in st.session_state.people]),
                "forms": pd.DataFrame([f for f in st.session_state.forms]),
                "responses": pd.DataFrame([r for r in st.session_state.responses])
            }
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation DataFrames: {e}")
            return {
                "people": pd.DataFrame(),
                "forms": pd.DataFrame(),
                "responses": pd.DataFrame()
            }
    
    def clear_all_data(self) -> bool:
        """ATTENTION: Supprime toutes les donn√©es"""
        try:
            st.session_state.people = []
            st.session_state.forms = []
            st.session_state.responses = []
            st.session_state.last_sync = None
            
            logger.warning("‚ö†Ô∏è TOUTES LES DONN√âES ONT √âT√â SUPPRIM√âES")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur suppression donn√©es: {e}")
            return False
    
    def get_health_check(self) -> Dict[str, Any]:
        """V√©rifie la sant√© de la base de donn√©es"""
        try:
            people_count = len(st.session_state.people)
            forms_count = len(st.session_state.forms)
            responses_count = len(st.session_state.responses)
            
            # V√©rifications d'int√©grit√©
            orphaned_responses = 0
            for response_dict in st.session_state.responses:
                response = Response.from_dict(response_dict)
                if (not self.get_person_by_id(response.person_id) or 
                    not self.get_form_by_id(response.form_id)):
                    orphaned_responses += 1
            
            return {
                "status": "healthy" if orphaned_responses == 0 else "warning",
                "people_count": people_count,
                "forms_count": forms_count,
                "responses_count": responses_count,
                "orphaned_responses": orphaned_responses,
                "last_sync": st.session_state.get('last_sync'),
                "database_version": st.session_state.get('database_version', '2.0')
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur health check: {e}")
            return {"status": "error", "error": str(e)}

# Instance globale du gestionnaire
@st.cache_resource
def get_database_manager() -> StreamlitDatabase:
    """R√©cup√®re l'instance singleton du gestionnaire de BDD"""
    return StreamlitDatabase()